datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

plugin hooks {
  provider = '@zenstackhq/swr'
  output = "./src/lib/hooks"
}


enum Role {
    USER
    ADMIN
    AGENT
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    listings      Listing[]

    // everyone can signup and their own profile is public
    @@allow('create,read', true)

    // only the user and admin can update or delete their own profile
    @@allow('update,delete', auth() == this)

    @@allow('all', auth().role == 'Admin')
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Listing {
    id           String   @id @default(cuid())
    title        String
    description  String
    price        Float
    bathrooms    Int
    bedrooms     Int
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    matterPortId String
    state        String
    city         String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // everyone can read listings
    @@allow('read', true)

    // full access for admins
    @@allow('all', auth().role == 'Admin')
}
