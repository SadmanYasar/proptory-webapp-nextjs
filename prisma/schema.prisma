//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider="postgresql"
    url=env("DATABASE_URL")
    shadowDatabaseUrl=env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialActions"]
}

enum Role {
    USER
    ADMIN
    AGENT
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
/// @@allow('all', auth().role == 'Admin')
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    image String?
    role Role @default(USER)
    accounts Account[]
    sessions Session[]
    listings Listing[]

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime
    @@unique([identifier, token])
}

/// @@allow('read', true)
/// @@allow('all', auth().role == 'Admin')
model Listing {
    id String @id() @default(cuid())
    title String
    description String
    price Float
    bathrooms Int
    bedrooms Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    matterPortId String
    state String
    city String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()

    zenstack_guard Boolean @default(true)
    zenstack_transaction String?

    @@index([zenstack_transaction])
}